{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getWindowDimensions","width","window","innerWidth","App","useState","data","setData","isEditorMaximized","updateEditor","isPreviewMaximized","updatePreview","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","document","getElementById","innerHTML","marked","className","style","color","height","marginBottom","display","flexDirection","boxShadow","transform","onClick","id","value","onChange","event","preventDefault","target","minHeight","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAGA,SAASA,IAEP,MAAO,CACLC,MAF4BC,OAAtBC,YA6HKC,MAxGf,WACE,IADa,EA+CWC,mBA9CV,uoCADD,mBA+CNC,EA/CM,KA+CAC,EA/CA,OAgD6BF,oBAAS,GAhDtC,mBAgDNG,EAhDM,KAgDaC,EAhDb,OAiD+BJ,oBAAS,GAjDxC,mBAiDNK,EAjDM,KAiDcC,EAjDd,KAkDNV,EAjET,WAAgC,IAAD,EACmBI,mBAASL,KAD5B,mBACtBY,EADsB,KACJC,EADI,KAY7B,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBb,KAItB,OADAE,OAAOc,iBAAiB,SAAUD,GAC3B,kBAAMb,OAAOe,oBAAoB,SAAUF,MACjD,IAEIH,EAqDSM,GAATjB,MAKP,OAHAa,qBAAU,WACRK,SAASC,eAAe,WAAWC,UAAYnB,OAAOoB,OAAOhB,KAC5D,CAACA,IAEF,yBAAKiB,UAAU,OACb,wBAAIC,MAAO,CAACC,MAAO,UAAnB,sBACA,yBACED,MACE,CAACE,OAAQlB,EAAoB,QAAU,QACzCP,MAAOA,EAAQ,IAAK,QAAUO,EAAoB,OAAS,QAC3DmB,aAAcnB,EAAoB,MAAQ,OAC1CoB,QAASlB,EAAqB,OAAS,OACvCmB,cAAe,SACfC,UAAY,0BAIZ,yBAAKP,UAAU,WACf,qCACA,uBAAIA,UAAWf,EAAoB,iBAAmB,mBAAoBgB,MAAO,CAACO,UAAW,iBAAkBC,QAAS,WACtHvB,GAAcD,OAIhB,8BAAUyB,GAAG,SAASC,MAAO5B,EAAM6B,SAAU,SAACC,GAChDA,EAAMC,iBACN9B,EAAQ6B,EAAME,OAAOJ,WAKrB,yBAAKV,MACH,CAACe,UAAW,QACZtC,MAAOA,EAAQ,IAAK,QAAUS,EAAoB,OAAS,QAC3DkB,QAASpB,EAAoB,OAAS,OACtCqB,cAAe,SACfC,UAAY,0BAGZ,yBAAKP,UAAU,WACf,sCACA,uBAAGA,UAAWb,EAAqB,iBAAmB,mBAAoBc,MAAO,CAACO,UAAW,iBAAkBC,QAAS,WACtHrB,GAAeD,OAGnB,yBAAKuB,GAAG,eC9GMO,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c9542ea.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width } = window;\r\n  return {\r\n    width\r\n  };\r\n}\r\n\r\nfunction useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n\r\nfunction App() {\r\n  const markdown = `\r\n# Welcome to my React Markdown Previewer!\r\n---\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHeres some code, \\`<div></div>\\` , between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n`;\r\n  const [data, setData] = useState(markdown);\r\n  const [isEditorMaximized, updateEditor] = useState(false);\r\n  const [isPreviewMaximized, updatePreview] = useState(false);\r\n  const {width} = useWindowDimensions();\r\n  \r\n  useEffect(()=> {\r\n    document.getElementById(\"preview\").innerHTML = window.marked(data)\r\n  }, [data])\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 style={{color: \"white\"}}>Markdown Previewer</h1>\r\n      <div \r\n        style={\r\n          {height: isEditorMaximized ? '100vh' : '400px',\r\n        width: width < 768? '300px' : isEditorMaximized ? '100%' : '500px',\r\n        marginBottom: isEditorMaximized ? '0px' : '50px',\r\n        display: isPreviewMaximized ? 'none' : 'flex',\r\n        flexDirection: 'column',\r\n        boxShadow : '1px 1px 15px 1px #333' }\r\n            \r\n        }\r\n      >\r\n        <nav className=\"nav-bar\">\r\n        <p>Editor</p>\r\n        <i  className={isEditorMaximized ? \"fa fa-compress\" : \"fa fa-arrows-alt\"} style={{transform: 'rotate(45deg)'}} onClick={()=>{\r\n          updateEditor(!isEditorMaximized);\r\n          \r\n        }}></i>\r\n        </nav>\r\n        <textarea id=\"editor\" value={data} onChange={(event)=>{\r\n      event.preventDefault();\r\n      setData(event.target.value);\r\n    }}>\r\n\r\n        </textarea>\r\n      </div>\r\n      <div style={\r\n        {minHeight: '200px',\r\n        width: width < 768? '350px' : isPreviewMaximized? '100%' : '800px',\r\n        display: isEditorMaximized ? 'none' : 'flex',\r\n        flexDirection: 'column',\r\n        boxShadow : '1px 1px 15px 1px #333'\r\n         }\r\n      }>\r\n        <nav className=\"nav-bar\">\r\n        <p>Preview</p>\r\n        <i className={isPreviewMaximized ? \"fa fa-compress\" : \"fa fa-arrows-alt\"} style={{transform: 'rotate(45deg)'}} onClick={()=>{\r\n          updatePreview(!isPreviewMaximized)\r\n        }}></i>\r\n        </nav>\r\n      <div id=\"preview\"></div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}